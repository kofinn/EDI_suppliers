@using EDI_suppliers.Data
@using System.IO;
@using System.Text;
@using System.Security.Cryptography.X509Certificates;

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Services.IPartnerService PartnerService
@inject Services.IGatewayService GatewayService
@inject Services.IConnectionService ConnectionService

@if (partners == null)
{
}
else
{
    <DataGrid TItem="Partner"
              Data="@partners"
              Editable="true"
              PageSize="999999"
              EditMode="DataGridEditMode.Inline"
              Filterable="true"
              RowInserted="@OnRowInserted"
              RowUpdated="@OnRowUpdated"
              RowRemoved="@OnRowRemoved"
              CustomFilter="@OnCustomFilter">
        <ChildContent>
            @if (autorizace == true)
            {
                <DataGridCommandColumn TItem="Partner">
                    <NewCommandTemplate>
                        <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
                    </NewCommandTemplate>
                    <EditCommandTemplate>
                        <Button Color="Color.Warning" Clicked="@context.Clicked">Edit</Button>
                    </EditCommandTemplate>
                    <SaveCommandTemplate>
                        <Button Color="Color.Success" Clicked="@context.Clicked">Save</Button>
                    </SaveCommandTemplate>
                    <CancelCommandTemplate>
                        <Button Color="Color.Warning" Clicked="@context.Clicked">Cancel</Button>
                    </CancelCommandTemplate>
                    <DeleteCommandTemplate>
                        <Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
                    </DeleteCommandTemplate>
                    <ClearFilterCommandTemplate>
                        <Button Color="Color.Info" Clicked="@context.Clicked">Clear Filter</Button>
                    </ClearFilterCommandTemplate>
                </DataGridCommandColumn>
            }
            <DataGridColumn TItem="Partner" Field="@nameof(Partner.GatewayT)" Caption="Gateway" Editable="true">
                <DisplayTemplate>
                    @{
                        var gateway = (context as Partner).GatewayT;

                        if (gateway == false)
                        {
                            @("NE");
                        }
                        else if (gateway == true)
                        {
                            @("ANO");
                        }
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <Select TValue="bool" SelectedValue="@( (bool)( (CellEditContext)context ).CellValue )" SelectedValueChanged="@(( v ) => ( (CellEditContext)context ).CellValue = v)">
                        <SelectItem Value="true">ANO</SelectItem>
                        <SelectItem Value="false">NE</SelectItem>
                        @{
                            selectGWdisable = !(bool)((CellEditContext)context).CellValue;
                            if ((bool)((CellEditContext)context).CellValue == false)
                            {
                                pkselectGw = null;
                            }
                        }
                    </Select>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Partner" Field="@nameof(Partner.Gateway)" Caption="Jméno Gateway" Editable="true">
                <DisplayTemplate>
                    @{
                        var gateway = context.Gateway;

                        if (gateway != null)
                        {
                            gateway = gateways.Where(x => x.GatewayId == gateway.GatewayId).FirstOrDefault();
                            @($"{gateway.Name}");
                        }
                    }
                </DisplayTemplate>
                <EditTemplate>
                    @{
                        if (context.CellValue != null)
                        {
                            pkselectGw = ((Gateway)context.CellValue).GatewayId;
                        }
                    }
                    <Select TValue="int?" Disabled="@selectGWdisable" SelectedValue="@pkselectGw" SelectedValueChanged="@OnselectValueGw">
                        @{
                            <SelectItem TValue="int?" Value="null"></SelectItem>

                            foreach (Gateway gate in gateways)
                            {
                                <SelectItem TValue="int?" Value="@gate.GatewayId">@gate.Name</SelectItem>
                            }

                            if (gateway.GatewayId != 0)
                            {
                                context.CellValue = gateway;
                            }
                            if (pkselectGw == null)
                            {
                                context.CellValue = null;
                            }
                        }
                    </Select>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Partner" Field="@nameof(Partner.EdiType)" Caption="Typ EDI spojení" Editable="true">
                <EditTemplate>
                    <Select TValue="int" SelectedValue="@( (int)( (CellEditContext)context ).CellValue )" SelectedValueChanged="@(( v ) => ( (CellEditContext)context ).CellValue = v)">
                        <SelectItem Value="0">OFTP2</SelectItem>
                        <SelectItem Value="1">ISDN</SelectItem>
                    </Select>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Partner" Field="@nameof(Partner.Name)" Caption="Jmeno EDI partnera" Editable="true" />
            <DataGridColumn TItem="Partner" Field="@nameof(Partner.SSID)" Caption="SSID" Editable="true">
                <EditTemplate>
                    @{
                        if (context.CellValue != null)
                        {
                            SSID = context.CellValue.ToString();
                        }

                        if (selectGWdisable == false)
                        {
                            SSID = gateway.SSID;
                            context.CellValue = SSID;
                        }
                    }
                    <TextEdit Disabled="@(!selectGWdisable)" Text="@SSID" TextChanged="@(( v ) => ( (CellEditContext)context ).CellValue = v)" />
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Partner" Field="@nameof(Partner.SFID)" Caption="SFID" Editable="true" />
            <DataGridColumn TItem="Partner" Field="@nameof(Partner.Cert)" Caption="Certifikát" Editable="true">
                <DisplayTemplate>
                    @{
                        if (context.Cert != null)
                        {
                            if (context.Cert.ToString() != null)
                            {
                                string? link = context.Cert.ToString();
                                <Blazorise.Link To="@link">
                                    Certifikát
                                </Blazorise.Link>
                            }
                        }
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <FileEdit Changed="@OnChanged" Written="@OnWritten" Ended="@OnEnded">@fileName</FileEdit>
                    @{
                        context.CellValue = path;
                    }
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Partner" Field="@nameof(Partner.Remark)" Caption="Poznámka" Editable="true" />
            <DataGridColumn TItem="Partner" Field="@nameof(Partner.CertDate)" Caption="Platnost Certifikátu" Editable="false" />
        </ChildContent>
        <EmptyTemplate>
            <div class="box">
                Nenalezení žádné záznamy
            </div>
        </EmptyTemplate>
        @*<DetailRowTemplate>
            @{
                var supplier = (context as Partner).Connections;

                <DataGrid TItem="Connection"
                          Data="connections"
                          Sortable="false">
                    <DataGridColumn TItem="Connection" Field="@nameof(Connection.Supplier)" Caption="Jméno dodavatele" />
                    <DataGridColumn TItem="Connection" Field="@nameof(Connection.Supplier.Name)" Caption="Číslo dodavatele" />
                </DataGrid>
            }
        </DetailRowTemplate>*@
    </DataGrid>


    <Snackbar @ref="snackbarLoad" Color="SnackbarColor.Primary" Location="SnackbarLocation.Right">
        <SnackbarBody>
            Nahrávání souboru
        </SnackbarBody>
    </Snackbar>

    <Snackbar @ref="snackbarError" Color="SnackbarColor.Danger" Location="SnackbarLocation.Right">
        <SnackbarBody>
            Chyba při nahrávání souboru
        </SnackbarBody>
        <SnackbarAction><SnackbarAction Clicked="@(()=>snackbarError.Hide())">OK</SnackbarAction></SnackbarAction>
    </Snackbar>

    <Snackbar @ref="snackbarSuccess" Color="SnackbarColor.Success" Location="SnackbarLocation.Right">
        <SnackbarBody>
            Soubor nahrán
        </SnackbarBody>
        <SnackbarAction><SnackbarAction Clicked="@(()=>snackbarSuccess.Hide())">OK</SnackbarAction></SnackbarAction>
    </Snackbar>

    <Snackbar @ref="snackbarCer" Color="SnackbarColor.Danger" Location="SnackbarLocation.Right">
        <SnackbarBody>
            Chyba certifikatu
        </SnackbarBody>
        <SnackbarAction><SnackbarAction Clicked="@(()=>snackbarCer.Hide())">OK</SnackbarAction></SnackbarAction>
    </Snackbar>
}

@code {

    [Parameter]
    public bool autorizace { get; set; }

    List<Partner> partners;
    List<Gateway> gateways;
    List<Connection> connections;

    Partner partner { get; set; } = new Partner();
    Gateway gateway { get; set; } = new Gateway();

    int? pkselectGw;
    bool selectGWdisable = true;
    string SSID;
    string pathCert = @"\Cert";
    string path;
    string fileName = "Certifikat";
    string customFilterValue;

    Snackbar snackbarLoad;
    Snackbar snackbarError;
    Snackbar snackbarSuccess;
    Snackbar snackbarCer;

    /// <summary>
    /// Funkce pro resetnutí promněných po úpravě záznamu v Gridu
    /// </summary>
    void ResetState()
    {
        pkselectGw = null;
        selectGWdisable = true;
        SSID = null;
        fileName = "Certifikat";
    }

    bool OnCustomFilter(Partner filtr)
    {
        if(string.IsNullOrEmpty(customFilterValue))
        {
            return true;
        }
        return true;
    }

    protected override async Task OnInitializedAsync()
    {
        partners = await PartnerService.Get();
        gateways = await GatewayService.Get();
        connections = await ConnectionService.Get();
    }

    void OnRowInserted(SavedRowItem<Partner, Dictionary<string, object>> e)
    {
        var partner = e.Item;

        DirectoryInfo cert = new DirectoryInfo(pathCert);
        if (!cert.Exists)
        {
            cert.Create();
        }

        //vytvoření slozky pro dodavateleID
        DirectoryInfo supp = new DirectoryInfo(Path.Combine(pathCert,partner.Name));
        if (!supp.Exists)
        {
            supp.Create();
        }

        //kopie souboru
        try
        {
            string temp = partner.Cert.Replace("temp", partner.Name);

            File.Copy(partner.Cert, partner.Cert.Replace("temp", partner.Name));
            partner.Cert = partner.Cert.Replace("temp", partner.Name);

            //Nacteni certifikatu
            try
            {
                X509Certificate certificate = X509Certificate.CreateFromCertFile(partner.Cert);
                partner.CertDate = DateTime.Parse(certificate.GetExpirationDateString());
            }

            catch (Exception exc)
            {
                //catch pro chybu zpracovani certifikatu
                snackbarCer.Show();
            }
        }
        catch
        {
            snackbarError.Show();
        }

        PartnerService.Add(partner);
        ResetState();
    }

    void OnRowUpdated(SavedRowItem<Partner, Dictionary<string, object>> e)
    {
        var partner = e.Item;
        PartnerService.Update(partner);
        ResetState();
    }

    void OnRowRemoved(Partner partner)
    {
        PartnerService.Delete(partner.PartnerId);
        ResetState();
    }

    void OnselectValueGw(int? pk)
    {
        if (pk != null)
        {
            gateway = gateways.Where(x => x.GatewayId == pk).FirstOrDefault();
        }
        else
        {
            gateway = new Gateway();
        }

        pkselectGw = pk;
    }

    async Task OnChanged(FileChangedEventArgs e)
    {
        try
        {
            foreach (var file in e.Files)
            {
                // do stremu se uloží data z fileedit
                using (var stream = new MemoryStream())
                {
                    // Here we're telling the FileEdit where to write the upload result
                    await file.WriteToStreamAsync(stream);

                    stream.Seek(0, SeekOrigin.Begin);

                    //vytvořebí složky pokud neexistuje
                    DirectoryInfo cert = new DirectoryInfo(pathCert);
                    if (!cert.Exists)
                    {
                        cert.Create();
                    }

                    //vytvoření slozky pro dodavateleID
                    DirectoryInfo supp = new DirectoryInfo(Path.Combine(pathCert, "temp"));
                    if (!supp.Exists)
                    {
                        supp.Create();
                    }

                    path = Path.Combine(pathCert, "temp", file.Name + "_" + DateTime.Now.ToString("yyMMDDHHmm"));
                    fileName = file.Name;

                    using (FileStream outputFileStream = new FileStream(path, FileMode.Create))
                    {
                        stream.CopyTo(outputFileStream);
                        outputFileStream.Close();
                    }
                }
            }
        }
        catch (Exception exc)
        {
            //cath chzba nahravani souboru
        }
    }

    void OnEnded(FileEndedEventArgs e)
    {
        if (e.Success == true)
        {
            snackbarLoad.Hide();
            snackbarSuccess.Show();
        }
        else
        {
            snackbarError.Show();
        }
    }

    void OnWritten(FileWrittenEventArgs e)
    {
        snackbarLoad.Show();
    }

    /// <summary>
    /// Nahrani souboru reportuje progress nahravani, certifikatz moc male neni potreba
    /// </summary>
    /// <param name="e"></param>
    void OnProgressed(FileProgressedEventArgs e)
    {
        Console.WriteLine($"File: {e.File.Name} Progress: {e.Percentage}");
    }
}
