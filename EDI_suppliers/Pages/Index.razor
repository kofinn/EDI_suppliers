@using EDI_suppliers.Data

@page "/"


@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Services.IConnectionService ConnectionService
@inject Services.ISupplierService SupplierService
@inject Services.IPartnerService PartnerService


<h2>Přehled spojení</h2>

@if (connections == null)
{

}
else
{
<SelectEdit TValue="Supplier" SelectedValue="@supplier">
    @{
        foreach (Supplier sup in suppliers)
        {
            <SelectItem Value="@sup">@sup.MfgId</SelectItem>
        }
    }
</SelectEdit>
}


    @code {

        // AuthenticationState is available as a CascadingParameter
        [CascadingParameter]
        private Task<AuthenticationState> authenticationStateTask { get; set; }

        string partnerName;

        // reference to the modal component
        private Modal modalDelete;

        List<Supplier> suppliers;
        List<Partner> partners;
        List<Connection> connections;
        Supplier supplier = new Supplier();


        protected override async Task OnInitializedAsync()
        {
            suppliers = await SupplierService.Get();
            partners = await PartnerService.Get();
            connections = await ConnectionService.Get();
        }



        private void ShowModal()
        {
            modalDelete.Show();
        }

        private void HideModal()
        {
            modalDelete.Hide();
        }


        void OnRowInserted(SavedRowItem<Connection, Dictionary<string, object>> e)
        {
            var connection = e.Item;
            ConnectionService.Add(connection);
        }

        void OnRowUpdated(SavedRowItem<Connection, Dictionary<string, object>> e)
        {
            var connection = e.Item;
            ConnectionService.Update(connection);
        }

        void OnRowRemoved(Connection connection)
        {
            //supplierName = supplier.Name;
            //modalDelete.Show();
            ConnectionService.Delete(connection.ConnectionId);
        }
    }
